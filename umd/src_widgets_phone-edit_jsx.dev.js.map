{"version":3,"file":"src_widgets_phone-edit_jsx.dev.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Editor for a phone number.\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({localNumber: this.filterNumber(e.target.value)});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '')\n    let number = null;\n    try {\n      number = parsePhoneNumber(raw);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(\"Mobile phone number required\");\n      return;\n    }\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          console.log('Callback', code, dial);\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    console.log('In nplaceholder', code, dial);\n    const number = getExampleNumber(code, examples).formatInternational();\n    return number.substring(dial.length + 1).trim();\n  }\n\n  render() {\n    console.log('placeholder:', this.state.placeholderNumber);\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["React","injectIntl","getExampleNumber","parsePhoneNumber","examples","dcodes","flagEmoji","PhoneEdit","PureComponent","constructor","props","codeMap","default","forEach","dc","code","dial","countryCode","state","dialCode","localNumber","placeholderNumber","handleChange","bind","handleFinished","handleKeyDown","showCountrySelector","e","setState","filterNumber","target","value","preventDefault","raw","trim","replace","number","err","isValid","inputField","setCustomValidity","onSubmit","format","key","onShowCountrySelector","console","log","formatInternational","substring","length","render","ref","autoFocus"],"sourceRoot":""}