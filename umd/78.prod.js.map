{"version":3,"file":"78.prod.js","mappings":"wOAUA,MAAMA,UAAkBC,IAAAA,cACtBC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,QAAU,CAAC,EAChBC,EAAAA,SAAuBC,IAAQH,KAAKC,QAAQE,EAAGC,MAAQD,EAAGE,IAAI,IAE9D,MAAMD,EAAON,EAAMQ,aAAe,KAC5BD,EAAOL,KAAKC,QAAQG,GAE1BJ,KAAKO,MAAQ,CACXD,YAAaF,EACbI,SAAUH,EACVI,YAAa,GACbC,kBAAmBV,KAAKU,kBAAkBN,EAAMC,IAGlDL,KAAKW,aAAeX,KAAKW,aAAaC,KAAKZ,MAC3CA,KAAKa,eAAiBb,KAAKa,eAAeD,KAAKZ,MAC/CA,KAAKc,cAAgBd,KAAKc,cAAcF,KAAKZ,MAC7CA,KAAKe,oBAAsBf,KAAKe,oBAAoBH,KAAKZ,KAC3D,CAEAW,aAAaK,GACXhB,KAAKiB,SAAS,CAACR,YAAaT,KAAKkB,aAAaF,EAAEG,OAAOC,QACzD,CAEAP,eAAeG,GACbA,EAAEK,iBACF,MAAMC,EAAO,GAAEtB,KAAKO,MAAMC,WAAWR,KAAKO,MAAME,YAAYc,SAASC,QAAQ,SAAU,IACvF,IAAIC,EAAS,KACb,IACEA,GAASC,EAAAA,EAAAA,GAAiBJ,EACb,CAAb,MAAOK,GAAM,CAEVF,GAAWA,EAAOG,UAIvB5B,KAAKF,MAAM+B,SAASJ,EAAOK,OAAO,UAHhC9B,KAAK+B,WAAWC,kBAAkB,+BAItC,CAGAlB,cAAcE,GACE,UAAVA,EAAEiB,KACJjC,KAAKa,eAAeG,EAExB,CAEAD,sBACEf,KAAKF,MAAMoC,sBAAsBlC,KAAKO,MAAMD,YAAaN,KAAKO,MAAMC,UAClE,CAACJ,EAAMC,KACHL,KAAKiB,SAAS,CACZX,YAAaF,EACbI,SAAUH,EACVK,kBAAmBV,KAAKU,kBAAkBN,EAAMC,IAClD,GAER,CAGAa,aAAaO,GACX,OAAKA,EAKEA,EAAOD,QAAQ,eAAgB,IAJ7BC,CAKX,CAEAf,kBAAkBN,EAAMC,GACtB,MAAM8B,GAASC,EAAAA,EAAAA,GAAiBhC,EAAMiC,EAAAA,GACtC,OAAOF,EAASA,EAAOG,sBAAsBC,UAAUlC,EAAKmC,OAAS,GAAGjB,OAAS,SACnF,CAEAkB,SACE,OACE,oCACE,0BAAMC,UAAU,YAAYC,QAAS3C,KAAKe,qBACxC,0BAAM2B,UAAU,iBAAgBE,EAAAA,EAAAA,IAAU5C,KAAKO,MAAMD,aAAa,KAAa,IAC7EN,KAAKO,MAAMC,SAAS,KACxB,2BAAOqC,KAAK,MAAMC,IAAKA,IAAQ9C,KAAK+B,WAAae,CAAG,EAAGC,YAAa/C,KAAKO,MAAMG,kBAC3EU,MAAOpB,KAAKO,MAAME,YAAauC,SAAUhD,KAAKW,aAC9CsC,UAAW,GAAIC,UAAWlD,KAAKc,cAAeqC,OAAQnD,KAAKa,eAC3DuC,UAAQ,EAACC,UAAWrD,KAAKF,MAAMuD,YAGzC,EAGF,SAAeC,EAAAA,EAAAA,YAAW3D,E","sources":["webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Editor for a phone number.\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({localNumber: this.filterNumber(e.target.value)});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '')\n    let number = null;\n    try {\n      number = parsePhoneNumber(raw);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(\"Mobile phone number required\");\n      return;\n    }\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 456';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["PhoneEdit","React","constructor","props","super","this","codeMap","dcodes","dc","code","dial","countryCode","state","dialCode","localNumber","placeholderNumber","handleChange","bind","handleFinished","handleKeyDown","showCountrySelector","e","setState","filterNumber","target","value","preventDefault","raw","trim","replace","number","parsePhoneNumber","err","isValid","onSubmit","format","inputField","setCustomValidity","key","onShowCountrySelector","sample","getExampleNumber","examples","formatInternational","substring","length","render","className","onClick","flagEmoji","type","ref","placeholder","onChange","maxLength","onKeyDown","onBlur","required","autoFocus","injectIntl"],"sourceRoot":""}