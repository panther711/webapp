{"version":3,"file":"src_widgets_audio-recorder_jsx.dev.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/audio-recorder.jsx"],"sourcesContent":["// Audio recorder widget.\n\nimport React from 'react';\n\nimport AudioPlayer from './audio-player.jsx';\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=642012\n// It adds duration and SeekHead to the webm record.\nimport fixWebmDuration from 'webm-duration-fix';\n\nimport { intArrayToBase64 } from '../lib/blob-helpers.js'\nimport { secondsToTime } from '../lib/strformat';\nimport { MAX_DURATION, MIN_DURATION } from '../config.js';\n\n// FFT resolution.\nconst BUFFER_SIZE = 256;\n// Make canvas bigger than the element size to reduce blurring.\nconst CANVAS_UPSCALING = 2.0;\n// Thickness of a visualization bar.\nconst LINE_WIDTH = 3 * CANVAS_UPSCALING;\n// Spacing between two visualization bars.\nconst SPACING = 2 * CANVAS_UPSCALING;\n// Duration represented by one visualization bar.\nconst MILLIS_PER_BAR = 100;\n// Color of histogram bars\nconst BAR_COLOR = '#BBBD';\n// Vertical scaling for visualization bars.\nconst BAR_SCALE = 64.0;\n// Number of bars in preview.\nconst VISUALIZATION_BARS = 96;\n// Maximum number of samples per bar.\nconst MAX_SAMPLES_PER_BAR = 10;\n\n// Recording format.\nconst AUDIO_MIME_TYPE = 'audio/webm';\n\nexport default class AudioRecorder extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enabled: true,\n      audioRecord: null,\n      recording: true,\n      paused: false,\n      duration: '0:00',\n      blobUrl: null,\n      preview: null\n    };\n\n    this.visualize = this.visualize.bind(this);\n    this.initMediaRecording = this.initMediaRecording.bind(this);\n    this.initCanvas = this.initCanvas.bind(this);\n    this.getRecording = this.getRecording.bind(this);\n    this.cleanUp = this.cleanUp.bind(this);\n\n    this.handleResume = this.handleResume.bind(this);\n    this.handlePause = this.handlePause.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDone = this.handleDone.bind(this);\n\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.viewBuffer = [];\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.stream = null;\n    this.mediaRecorder = null;\n    this.audioContext = null;\n    this.audioInput = null;\n    this.analyser = null;\n\n    this.audioChunks = [];\n\n    // Start recorder right away.\n    try {\n      navigator.mediaDevices.getUserMedia({audio: true, video: false}).then(this.initMediaRecording, this.props.onError);\n    } catch (err) {\n      this.props.onError(err);\n    }\n  }\n\n  componentWillUnmount() {\n    this.startedOn = null;\n    if (this.stream) {\n      this.cleanUp();\n    }\n  }\n\n  // Draw amplitude of sound.\n  visualize() {\n    this.initCanvas();\n\n    const pcmData = new Uint8Array(this.analyser.frequencyBinCount);\n    const width = this.canvasWidth;\n    const height = this.canvasHeight;\n    // Number of bars.\n    const viewLength = (width / (LINE_WIDTH + SPACING)) | 0;\n    // Duration of audio which fits onto the screen.\n    const viewDuration = MILLIS_PER_BAR * viewLength;\n\n    this.canvasContext.lineWidth = LINE_WIDTH;\n    this.canvasContext.strokeStyle = BAR_COLOR;\n\n    let prevBarCount = 0;\n    let volume = 0.0;\n    let countPerBar = 0;\n    const drawFrame = _ => {\n      if (!this.startedOn) {\n        return;\n      }\n      window.requestAnimationFrame(drawFrame);\n\n      const duration = this.durationMillis + (Date.now() - this.startedOn);\n      // Update record length timer.\n      this.setState({duration: secondsToTime(duration / 1000)});\n\n      // Check if record is too long.\n      if (duration > MAX_DURATION) {\n        this.startedOn = null;\n        this.mediaRecorder.pause();\n        this.durationMillis += Date.now() - this.startedOn;\n        this.setState({enabled: false, recording: false, duration: secondsToTime(this.durationMillis / 1000)});\n      }\n\n      // Draw histogram.\n\n      // Get current waveform and calculate its amplitude.\n      this.analyser.getByteTimeDomainData(pcmData);\n      let amp = 0.0;\n      for (const amplitude of pcmData) {\n        amp += (amplitude - 127) ** 2;\n      }\n\n      // Sum the amplitude.\n      volume += Math.sqrt(amp/pcmData.length);\n      countPerBar ++;\n\n      let barCount = (duration / MILLIS_PER_BAR) | 0;\n      // Shift of the histogram along x-axis to make scrolling smooth. No need to shift if recording is too short.\n      const dx = viewDuration > duration ? 0 :\n        (duration - MILLIS_PER_BAR * barCount) / MILLIS_PER_BAR * (LINE_WIDTH + SPACING);\n\n      if (prevBarCount != barCount) {\n        prevBarCount = barCount;\n        // Add new amplitude visualization bar.\n        this.viewBuffer.push(volume/countPerBar);\n        volume = 0.0;\n        countPerBar = 0;\n        if (this.viewBuffer.length > viewLength) {\n          // Keep at most 'viewLength' amplitude bars.\n          this.viewBuffer.shift();\n        }\n      }\n\n      // Clear canvas.\n      this.canvasContext.clearRect(0, 0, width, height);\n\n      // Draw amplitude bars.\n      this.canvasContext.beginPath();\n      for (let i = 0; i < this.viewBuffer.length; i++) {\n        let x = i * (LINE_WIDTH + SPACING) - dx;\n        let y = Math.min(this.viewBuffer[i] / BAR_SCALE, 0.9) * height;\n\n        this.canvasContext.moveTo(x, (height - y) * 0.5);\n        this.canvasContext.lineTo(x, height * 0.5 + y * 0.5);\n      }\n      // Actually draw the bars on canvas.\n      this.canvasContext.stroke();\n    }\n\n    drawFrame();\n  }\n\n  handlePause(e) {\n    e.preventDefault();\n    this.mediaRecorder.pause();\n    this.mediaRecorder.requestData();\n    this.durationMillis += Date.now() - this.startedOn;\n    this.startedOn = null;\n    this.setState({recording: false});\n  }\n\n  handleResume(e) {\n    e.preventDefault();\n    if (this.state.enabled) {\n      this.startedOn = Date.now();\n      this.mediaRecorder.resume();\n      this.setState({recording: true}, this.visualize);\n    }\n  }\n\n  handleDelete(e) {\n    e.preventDefault();\n    this.durationMillis = 0;\n    this.startedOn = null;\n    this.mediaRecorder.stop();\n    this.cleanUp();\n    this.setState({recording: false});\n  }\n\n  handleDone(e) {\n    e.preventDefault();\n    this.setState({recording: false});\n    if (this.startedOn) {\n      this.durationMillis += Date.now() - this.startedOn;\n      this.startedOn = null;\n    }\n    // Stop recording and return data.\n    if (this.mediaRecorder) {\n      this.mediaRecorder.stop();\n    }\n  }\n\n  initCanvas() {\n    this.canvasRef.current.width = this.canvasRef.current.offsetWidth * CANVAS_UPSCALING;\n    this.canvasRef.current.height = this.canvasRef.current.offsetHeight * CANVAS_UPSCALING;\n\n    this.canvasContext = this.canvasRef.current.getContext('2d');\n    this.canvasContext.lineCap = 'round';\n    // To reduce line blurring.\n    this.canvasContext.translate(0.5, 0.5);\n    this.canvasWidth = this.canvasRef.current.width;\n    this.canvasHeight = this.canvasRef.current.height;\n  }\n\n  initMediaRecording(stream) {\n    this.stream = stream;\n    this.mediaRecorder = new MediaRecorder(stream, {mimeType: AUDIO_MIME_TYPE, audioBitsPerSecond: 24_000});\n\n    // The following code is needed for visualization.\n    this.audioContext = new AudioContext();\n    this.audioInput = this.audioContext.createMediaStreamSource(stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = BUFFER_SIZE;\n    this.audioInput.connect(this.analyser);\n\n    this.mediaRecorder.onstop = _ => {\n      if (this.durationMillis > MIN_DURATION) {\n        this.getRecording(this.mediaRecorder.mimeType, this.durationMillis)\n          .then(result => this.props.onFinished(result.url, result.preview, this.durationMillis));\n      } else {\n        this.props.onDeleted();\n      }\n      this.cleanUp();\n    }\n\n    this.mediaRecorder.ondataavailable = (e) => {\n      if (e.data.size > 0) {\n        this.audioChunks.push(e.data);\n      }\n\n      if (this.mediaRecorder.state != 'inactive') {\n        this.getRecording(this.mediaRecorder.mimeType).then(result => {\n          this.setState({\n            blobUrl: result.url,\n            preview: result.preview\n          });\n        });\n      }\n    }\n\n    this.durationMillis = 0;\n    this.startedOn = Date.now();\n    this.mediaRecorder.start();\n    this.visualize();\n  }\n\n  // Obtain data in a form sutable for sending or playing back.\n  // If duration is valid, apply fix for Chrome's WebM duration bug.\n  getRecording(mimeType, duration) {\n    mimeType = mimeType || AUDIO_MIME_TYPE;\n    let blob = new Blob(this.audioChunks, {type: mimeType});\n    return fixWebmDuration(blob, mimeType)\n      .then(fixedBlob => { blob = fixedBlob; return fixedBlob.arrayBuffer(); })\n      .then(arrayBuff => this.audioContext.decodeAudioData(arrayBuff))\n      .then(decoded => this.createPreview(decoded))\n      .then(preview => ({url: window.URL.createObjectURL(blob), preview: intArrayToBase64(preview)}));\n  }\n\n  // Preview must be calculated at the source: Chrome does not allow background AudioContext.\n  createPreview(audio) {\n    const data = audio.getChannelData(0);\n    // Number of amplitude bars in preview.\n    const viewLength = Math.min(data.length, VISUALIZATION_BARS);\n    // The number of samples in each bar.\n    const totalSPB = (data.length / viewLength) | 0;\n    // Distance between samples: we are going to take just a fracton of samples.\n    const samplingRate = Math.max(1, (totalSPB / MAX_SAMPLES_PER_BAR) | 0);\n\n    let buffer = [];\n    let max = -1;\n    for (let i = 0; i < viewLength; i++) {\n      let amplitude = 0;\n      let count = 0;\n      for (let j = 0; j < totalSPB; j += samplingRate) {\n        amplitude += data[totalSPB * i + j] ** 2;\n        count ++;\n      }\n      const val = Math.sqrt(amplitude / count);\n      buffer.push(val);\n      max = Math.max(max, val);\n    }\n    // Normalize amplitude to 0..100.\n    if (max > 0) {\n      buffer = buffer.map(a => (100 * a / max) | 0);\n    }\n    return buffer;\n  }\n\n  cleanUp() {\n    this.audioInput.disconnect();\n    this.stream.getTracks().forEach(track => track.stop());\n  }\n\n  render() {\n    const resumeClass = 'material-icons ' + (this.state.enabled ? 'red' : 'gray');\n    return (\n      <div className=\"audio\">\n        <a href=\"#\" onClick={this.handleDelete} title=\"Delete\">\n          <i className=\"material-icons gray\">delete_outline</i>\n        </a>\n        {this.state.recording ?\n          <canvas ref={this.canvasRef} />\n          :\n          <AudioPlayer\n            src={this.state.blobUrl}\n            preview={this.state.preview}\n            duration={this.durationMillis}\n            short={true} />\n        }\n        <div className=\"duration\">{this.state.duration}</div>\n        {this.state.recording ?\n          <a href=\"#\" onClick={this.handlePause} title=\"Pause\">\n            <i className=\"material-icons\">pause_circle_outline</i>\n          </a> :\n          <a href=\"#\" onClick={this.handleResume} title=\"Resume\">\n            <i className={resumeClass}>radio_button_checked</i>\n          </a>\n        }\n        <a href=\"#\" onClick={this.handleDone} title=\"Send\">\n          <i className=\"material-icons\">send</i>\n        </a>\n      </div>\n    );\n  }\n}\n"],"names":["React","AudioPlayer","fixWebmDuration","intArrayToBase64","secondsToTime","MAX_DURATION","MIN_DURATION","BUFFER_SIZE","CANVAS_UPSCALING","LINE_WIDTH","SPACING","MILLIS_PER_BAR","BAR_COLOR","BAR_SCALE","VISUALIZATION_BARS","MAX_SAMPLES_PER_BAR","AUDIO_MIME_TYPE","AudioRecorder","PureComponent","constructor","props","state","enabled","audioRecord","recording","paused","duration","blobUrl","preview","visualize","bind","initMediaRecording","initCanvas","getRecording","cleanUp","handleResume","handlePause","handleDelete","handleDone","durationMillis","startedOn","viewBuffer","canvasRef","createRef","componentDidMount","stream","mediaRecorder","audioContext","audioInput","analyser","audioChunks","navigator","mediaDevices","getUserMedia","audio","video","then","onError","err","componentWillUnmount","pcmData","Uint8Array","frequencyBinCount","width","canvasWidth","height","canvasHeight","viewLength","viewDuration","canvasContext","lineWidth","strokeStyle","prevBarCount","volume","countPerBar","drawFrame","_","window","requestAnimationFrame","Date","now","setState","pause","getByteTimeDomainData","amp","amplitude","Math","sqrt","length","barCount","dx","push","shift","clearRect","beginPath","i","x","y","min","moveTo","lineTo","stroke","e","preventDefault","requestData","resume","stop","current","offsetWidth","offsetHeight","getContext","lineCap","translate","MediaRecorder","mimeType","audioBitsPerSecond","AudioContext","createMediaStreamSource","createAnalyser","fftSize","connect","onstop","result","onFinished","url","onDeleted","ondataavailable","data","size","start","blob","Blob","type","fixedBlob","arrayBuffer","arrayBuff","decodeAudioData","decoded","createPreview","URL","createObjectURL","getChannelData","totalSPB","samplingRate","max","buffer","count","j","val","map","a","disconnect","getTracks","forEach","track","render","resumeClass"],"sourceRoot":""}