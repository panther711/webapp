{"version":3,"file":"365.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/widgets/credential-edit.jsx","webpack://tinode-webapp/./src/views/account-settings-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Enter one credential at a time.\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport PhoneEdit from './phone-edit.jsx';\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\n\nconst messages = defineMessages({\n  password_reset_email_sent: {\n    id: 'password_reset_email_sent',\n    defaultMessage: 'An email with security code has been sent.',\n    description: 'Notification that the email with password reset instructions has been sent'\n  },\n  password_reset_sms_sent: {\n    id: 'password_reset_sms_sent',\n    defaultMessage: 'A text message with security code has been sent.',\n    description: 'Notification that the SMS with password reset instructions has been sent'\n  },\n});\n\nclass CredentialEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      code: '',\n      tel: '',\n      email: '',\n      sent: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePhoneChange = this.handlePhoneChange.bind(this);\n    this.handleCodeChange = this.handleCodeChange.bind(this);\n  }\n\n  static formatPhoneNumber(raw) {\n    let number;\n    try {\n      number = parsePhoneNumber(raw);\n    } catch (err) {}\n    return number ? number.formatInternational() : raw;\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePhoneChange(number) {\n    this.setState({tel: number});\n  }\n\n  handleCodeChange(e) {\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const value = this.props.method == 'email' ? this.state.email : this.state.tel;\n    if (value) {\n      this.props.onSubmit(this.props.method, value);\n      this.setState({sent: true});\n      const msg = this.props.method == 'email' ? messages.password_reset_email_sent : messages.password_reset_sms_sent;\n      this.props.onError(this.props.intl.formatMessage(msg), 'info');\n    }\n  }\n\n  render() {\n    const readyForCode = this.state.sent || !this.props.done;\n    const currentValue = CredentialEdit.formatPhoneNumber(readyForCode ?\n      (this.state.tel || this.state.email) : this.props.val);\n\n    const changeEmail = (\n      <><div className=\"panel-form-row\">\n        <label className=\"large\"><FormattedMessage id=\"change_email\" defaultMessage=\"Change email\"\n          description=\"Prompt to change current email\" /></label>\n      </div>\n      <div className=\"group\">\n        <label className=\"small gray\">\n          <FormattedMessage id=\"current_email\" defaultMessage=\"Current email\" description=\"Label for old email\" />\n        </label>\n      </div></>);\n\n    const changePhone = (\n      <><div className=\"panel-form-row\">\n      <label className=\"large\"><FormattedMessage id=\"change_phone\" defaultMessage=\"Change phone number\"\n        description=\"Prompt to change current phone number\"/></label>\n      </div>\n      <div className=\"group\">\n        <label className=\"small gray\">\n          <FormattedMessage id=\"current_phone\" defaultMessage=\"Current phone number\" description=\"Label for old phone\" />\n        </label>\n      </div></>\n    );\n\n    const newEmailLabel = (<label className=\"small gray\">\n        <FormattedMessage id=\"new_email\" defaultMessage=\"New email\"\n          description=\"Prompt for entering a new email\" />\n      </label>);\n\n    const newEmailInput = (\n      <><div className=\"group\">{newEmailLabel}</div>\n      <div className=\"group\">\n        <FormattedMessage id=\"email_prompt\" defaultMessage=\"Email, e.g. jdoe@example.com\"\n          description=\"Input placeholder for email entry\">{\n          (email_prompt) => <input type=\"email\" placeholder={email_prompt} autoComplete=\"email\"\n            value={this.state.email} onChange={this.handleEmailChange} required/>\n        }</FormattedMessage>\n      </div></>\n    );\n\n    const newPhoneLabel = (<label className=\"small gray\">\n        <FormattedMessage id=\"new_phone_number\" defaultMessage=\"New phone number\"\n        description=\"Prompt for entering a new telephone number\" />\n      </label>);\n\n    const newPhoneInput = (\n      <><div className=\"group\">{newPhoneLabel}</div>\n      <div className=\"panel-form-row\">\n        <PhoneEdit\n          autoFocus={true}\n          onShowCountrySelector={this.props.onShowCountrySelector}\n          onSubmit={this.handlePhoneChange} />\n      </div></>\n    );\n\n    const codeInput = (\n      <><div className=\"group\">\n        <label className=\"small gray\"><FormattedMessage id=\"enter_confirmation_code_prompt\" defaultMessage=\"Confirmation code\"\n            description=\"Request to enter confirmation code\" /></label>\n      </div>\n      <div className=\"group\">\n        <FormattedMessage id=\"numeric_confirmation_code_prompt\" defaultMessage=\"Numbers only\"\n          description=\"Prompt for numeric conformation code\">{\n          (numbers_only) => <input type=\"text\" placeholder={numbers_only} maxLength={10}\n          value={this.state.code} onChange={this.handleCodeChange} required/>\n        }</FormattedMessage>\n      </div></>\n    );\n\n    return (<form className=\"panel-form-column\" onSubmit={this.handleSubmit}>\n      {readyForCode ? null :\n      this.props.method == 'email' ?\n        changeEmail\n      : this.props.method == 'tel' ?\n        changePhone\n      : null}\n      <div className=\"panel-form-row\">\n        <tt className=\"quoted\">{currentValue}</tt>\n      </div>\n      {readyForCode ? null :\n      this.props.method == 'email' ?\n        newEmailInput\n      : this.props.method == 'tel' ?\n        newPhoneInput\n      : null}\n      {readyForCode ? codeInput : null}\n      <div className=\"dialog-buttons\">\n        <button className=\"secondary\" onClick={this.props.onCancel}>\n          <FormattedMessage id=\"button_cancel\" defaultMessage=\"Cancel\" description=\"Button [Cancel]\" />\n        </button>\n        <button className=\"primary\" type=\"submit\" >\n          <FormattedMessage id=\"button_ok\" defaultMessage=\"OK\" description=\"Button [OK]\" />\n        </button>\n      </div>\n    </form>);\n  }\n}\n\nexport default injectIntl(CredentialEdit);\n","// Edit account parameters.\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { parsePhoneNumber } from 'libphonenumber-js/mobile';\n\nimport AvatarUpload from '../widgets/avatar-upload.jsx';\nimport BadgeList from '../widgets/badge-list.jsx';\n\nimport { makeImageUrl } from '../lib/blob-helpers.js';\nimport { MAX_TITLE_LENGTH, MAX_TOPIC_DESCRIPTION_LENGTH } from '../config.js';\nimport CredentialEdit from '../widgets/credential-edit.jsx';\n\nfunction _clip(str, length) {\n  return str && str.substring(0, length);\n}\n\nexport default class AccountSettingsView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const me = this.props.tinode.getMeTopic();\n    this.state = {\n      fullName: _clip(me.public ? me.public.fn : undefined, MAX_TITLE_LENGTH),\n      description: _clip(me.public ? me.public.note : undefined, MAX_TOPIC_DESCRIPTION_LENGTH),\n      avatar: makeImageUrl(me.public ? me.public.photo : null),\n      credentials: me.getCredentials() || [],\n      credEdit: undefined\n    };\n  }\n\n  componentDidMount() {\n    const me = this.props.tinode.getMeTopic();\n    me.onCredsUpdated = _ => this.setState({credentials: me.getCredentials()});\n  }\n\n  componentWillUnmount() {\n    const me = this.props.tinode.getMeTopic();\n    me.onCredsUpdated = null;\n  }\n\n  render() {\n    if (this.state.credEdit) {\n      return (\n        <CredentialEdit\n          method={this.state.credEdit.meth}\n          val={this.state.credEdit.val}\n          done={this.state.credEdit.done}\n          onShowCountrySelector={this.props.onShowCountrySelector}\n          onSubmit={this.props.onCredAdd}\n          onCancel={_ => this.setState({credEdit: undefined})}\n          onError={this.props.onError} />\n      );\n    }\n\n    const credentials = [];\n    this.state.credentials.forEach((cred, idx) => {\n      if (!['email', 'tel'].includes(cred.meth)) {\n        // Skip unknown methods.\n        return ;\n      }\n\n      let val = cred.val\n      if (cred.meth == 'tel') {\n        const number = parsePhoneNumber(cred.val);\n        val = number ? number.formatInternational() : cred.val;\n      }\n\n      credentials.push(\n        <div className=\"group quoted\" key={idx}>\n          <tt className=\"clickable\" onClick={e => {e.preventDefault(); this.setState({credEdit: cred});}}>{val}</tt>\n          <span> {\n            cred.done ? null :\n            <>\n              <i className=\"material-icons\">pending</i>&nbsp;\n              <a href=\"#\" onClick={e => {e.preventDefault(); this.props.onCredDelete(cred.meth, cred.val);}}>\n                <i className=\"material-icons\">delete</i>\n              </a>\n            </>\n          }</span>\n        </div>);\n    });\n    if (credentials.length > 0) {\n      // Add title as the first element.\n      credentials.unshift(\n        <label className=\"small\" key={'title'}>\n          <FormattedMessage id=\"label_user_contacts\" defaultMessage=\"Contacts\"\n            description=\"Label for user contacts\" />\n        </label>);\n    }\n\n    return (\n      <div className=\"scrollable-panel\">\n        <div className=\"panel-form-column\">\n          <a href=\"#\" className=\"flat-button float-right\" onClick={e => {e.preventDefault(); this.props.onNavigate('general');}}>\n            <i className=\"material-icons\">edit</i>&nbsp;\n            <FormattedMessage id=\"button_edit\" defaultMessage=\"Edit\" description=\"Call to action [Edit]\" />\n          </a>\n          <center>\n            <AvatarUpload\n              tinode={this.props.tinode}\n              avatar={this.state.avatar}\n              readOnly={true}\n              uid={this.props.myUserId}\n              title={this.state.fullName} />\n          </center>\n          <div className=\"group\">\n            <label className=\"small\">\n              <FormattedMessage id=\"label_your_name\" defaultMessage=\"Your name\"\n                description=\"Label for full name editing\" />\n            </label>\n            <div className=\"large ellipsized\">{this.state.fullName}</div>\n          </div>\n          <div className=\"group\">\n            <label className=\"small\"><FormattedMessage id=\"label_user_id\" defaultMessage=\"ID:\"\n              description=\"Label for user address (ID)\" /></label>&nbsp;\n            <tt>{this.props.myUserId}</tt>\n          </div>\n          <div className=\"group\">\n            <BadgeList trustedBadges={this.props.trustedBadges} />\n          </div>\n          {this.state.description ?\n            <div className=\"group\">\n              <label className=\"small\">\n                <FormattedMessage id=\"label_description\" defaultMessage=\"Description\"\n                  description=\"Label for editing topic description\" />\n              </label>\n              <div className=\"quoted\">{this.state.description}</div>\n            </div> : null}\n        </div>\n        <div className=\"hr\" />\n        <div className=\"panel-form-column\">\n          <div className=\"group\">{credentials}</div>\n        </div>\n        <div className=\"hr\" />\n        <div className=\"panel-form-column\">\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('notif');}}>\n            <i className=\"material-icons\">notifications</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_notifications\"\n              defaultMessage=\"Notifications\" description=\"Sidepanel title for AccNotificationsView.\" />\n          </a>\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('security');}}>\n            <i className=\"material-icons\">security</i>&nbsp;<FormattedMessage id=\"button_security\"\n              defaultMessage=\"Security\" description=\"Navigaton button for security panel.\" />\n          </a>\n          <a href=\"#\" className=\"flat-button\" onClick={e => {e.preventDefault(); this.props.onNavigate('support');}}>\n            <i className=\"material-icons\">contact_support</i>&nbsp;<FormattedMessage id=\"sidepanel_title_acc_support\"\n              defaultMessage=\"Support\" description=\"Sidepanel title for AccSupportView.\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n};\n","// Editor for a phone number.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nconst messages = defineMessages({\n  mobile_number_required: {\n    id: 'mobile_number_required',\n    defaultMessage: 'Mobile phone number required',\n    description: 'Error message'\n  }\n});\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    const prefix = `+${this.state.dialCode}`;\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\n    formatted = formatted.substring(prefix.length).trim();\n    this.setState({localNumber: formatted});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\n    let number = null;\n    try {\n      number = parsePhoneNumber(`+${raw}`);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\n      return;\n    }\n\n    this.inputField.setCustomValidity('');\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["messages","defineMessages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","CredentialEdit","React","constructor","props","super","this","state","code","tel","email","sent","handleSubmit","bind","handleEmailChange","handlePhoneChange","handleCodeChange","static","raw","number","parsePhoneNumber","err","formatInternational","e","setState","target","value","replace","preventDefault","method","onSubmit","msg","onError","intl","formatMessage","render","readyForCode","done","currentValue","formatPhoneNumber","val","changeEmail","className","FormattedMessage","changePhone","newEmailLabel","newEmailInput","email_prompt","type","placeholder","autoComplete","onChange","required","newPhoneLabel","newPhoneInput","autoFocus","onShowCountrySelector","codeInput","numbers_only","maxLength","onClick","onCancel","injectIntl","_clip","str","length","substring","AccountSettingsView","me","tinode","getMeTopic","fullName","public","fn","undefined","MAX_TITLE_LENGTH","description","note","MAX_TOPIC_DESCRIPTION_LENGTH","avatar","makeImageUrl","photo","credentials","getCredentials","credEdit","componentDidMount","onCredsUpdated","_","componentWillUnmount","meth","onCredAdd","forEach","cred","idx","includes","push","key","href","onCredDelete","unshift","onNavigate","readOnly","uid","myUserId","title","trustedBadges","mobile_number_required","PhoneEdit","codeMap","dcodes","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","trim","isValid","inputField","setCustomValidity","format","sample","getExampleNumber","examples","flagEmoji","ref","onKeyDown","onBlur"],"sourceRoot":""}