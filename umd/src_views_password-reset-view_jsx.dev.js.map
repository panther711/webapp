{"version":3,"file":"src_views_password-reset-view_jsx.dev.js","mappings":"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","sources":["webpack://tinode-webapp/./src/views/password-reset-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// A password reset form.\nimport React from 'react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport PhoneEdit from '../widgets/phone-edit.jsx';\nimport VisiblePassword from '../widgets/visible-password.jsx';\n\nimport HashNavigation from '../lib/navigation.js';\n\nconst messages = defineMessages({\n  password_reset_email_sent: {\n    id: 'password_reset_email_sent',\n    defaultMessage: 'An email with security code has been sent.',\n    description: 'Notification that the email with password reset instructions has been sent'\n  },\n  password_reset_sms_sent: {\n    id: 'password_reset_sms_sent',\n    defaultMessage: 'A text message with security code has been sent.',\n    description: 'Notification that the SMS with password reset instructions has been sent'\n  }\n});\n\nclass PasswordResetView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tel: '',\n      email: '',\n      password: '',\n      sent: false,\n      haveCode: false,\n      code: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCodeChange = this.handleCodeChange.bind(this);\n    this.handleShowCodeField = this.handleShowCodeField.bind(this);\n\n    // Connection will trigger change by changing the this.props.serverVersion.\n    props.tinode.connect()\n      .catch(err => {\n        this.props.onError(err.message, 'err');\n      });\n  }\n\n  componentDidMount() {\n    const parsed = HashNavigation.parseUrlHash(window.location.hash);\n    this.setState({token: parsed.params.token, scheme: parsed.params.scheme});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.token) {\n      // Reset using token.\n      this.props.onReset(this.state.password.trim(), {\n        scheme: 'token',\n        token: this.state.token\n      });\n    } else if (this.state.code && this.props.reqCredMethod) {\n      // Reset using security code.\n      // The secret is structured as <code>:<cred_method>:<cred_value>, \"123456:email:alice@example.com\".\n      const cred = this.state.email.trim() || this.state.tel.trim();\n      this.props.onReset(this.state.password.trim(), {\n        scheme: 'code',\n        secret: btoa(`${this.state.code}:${this.props.reqCredMethod}:${cred}`)\n      });\n    } else {\n      // Send email or SMS with the secret code.\n      const email = this.state.email.trim();\n      const tel = this.state.tel.trim();\n      this.setState({email: email, tel: tel});\n      this.props.onRequest(this.props.reqCredMethod, email || tel)\n        .then(_ => {\n          this.setState({sent: true});\n          const msg = this.props.reqCredMethod == 'email' ? messages.password_reset_email_sent :\n            this.props.reqCredMethod == 'tel' ? messages.password_reset_sms_sent : null;\n          if (msg) {\n            this.props.onError(this.props.intl.formatMessage(msg), 'info');\n          }\n        });\n    }\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleCodeChange(e) {\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\n  }\n\n  handleShowCodeField(e) {\n    e.preventDefault();\n    this.setState({haveCode: true});\n  }\n\n  render() {\n    const showCredentialInput = !(this.state.token && this.state.scheme);\n    const showPasswordInput = !showCredentialInput || this.state.haveCode || this.state.sent;\n\n    const passwordInput = (<>\n        <label className=\"small gray\" htmlFor=\"new-password\">\n          <FormattedMessage id=\"label_new_password\"\n            defaultMessage=\"New password\"\n            description=\"Label for entering a new password\" />\n        </label>\n        <FormattedMessage id=\"new_password_placeholder\" defaultMessage=\"Enter new password\"\n          description=\"Placeholder for entering new password\">{\n          (placeholder) => <VisiblePassword\n            id=\"new-password\"\n            placeholder={placeholder}\n            autoComplete=\"new-password\"\n            value={this.state.password}\n            required={true} autoFocus={true}\n            onChange={this.handlePasswordChange} />\n        }</FormattedMessage>\n      </>);\n\n    const emailInput = (<>\n        {this.state.haveCode ?\n          null :\n          <label htmlFor=\"inputEmail\">\n            <FormattedMessage id=\"label_reset_password\"\n              defaultMessage=\"Send a password reset email\"\n              description=\"Label for password reset field\" />\n          </label>\n        }\n        <FormattedMessage id=\"credential_email_prompt\" defaultMessage=\"Your registration email\"\n          description=\"Placeholder for entering email\">{\n          (placeholder) => <input type=\"email\" id=\"inputEmail\"\n            placeholder={placeholder}\n            autoComplete=\"email\"\n            value={this.state.email}\n            onChange={this.handleEmailChange}\n            required autoFocus />\n        }</FormattedMessage>\n      </>);\n\n    const phoneInput = (<>\n        {this.state.haveCode ?\n          null :\n          <div><label>\n            <FormattedMessage id=\"label_reset_password_tel\"\n              defaultMessage=\"Send SMS to reset password\"\n              description=\"Label for password reset field by phone\" />\n          </label></div>\n        }\n        <div>\n          <label className=\"small gray\">\n            <FormattedMessage id=\"mobile_phone_number\" defaultMessage=\"Mobile phone number\"\n              description=\"Prompt for entering a mobile phone number\" />\n          </label>\n        </div>\n        <div className=\"panel-form-row\">\n          <PhoneEdit\n            autoFocus={true}\n            onShowCountrySelector={this.props.onShowCountrySelector}\n            onSubmit={number => this.setState({tel: number})} />\n        </div>\n      </>);\n\n    const codeInput = (<>\n        <div>\n          <label className=\"small gray\" htmlFor=\"enter-confirmation-code\">\n            <FormattedMessage id=\"enter_confirmation_code_prompt\"\n              defaultMessage=\"Confirmation code\"\n              description=\"Request to enter confirmation code\" />\n          </label>\n        </div>\n        <div>\n          <FormattedMessage id=\"numeric_confirmation_code_prompt\"\n            defaultMessage=\"Numbers only\" description=\"Prompt for numeric conformation code\">{\n            (numbers_only) => <input type=\"text\" id=\"enter-confirmation-code\"\n              placeholder={numbers_only} maxLength={10}\n              value={this.state.code} onChange={this.handleCodeChange} required />\n          }</FormattedMessage>\n        </div>\n      </>);\n\n    const credentialInput = this.props.reqCredMethod == 'email' ?\n      emailInput : this.props.reqCredMethod == 'tel' ? phoneInput : null;\n\n    return (\n      <form id=\"password-reset-form\" onSubmit={this.handleSubmit}>\n        {!this.state.sent && showCredentialInput ? credentialInput : null}\n        {this.state.haveCode || this.state.sent ? codeInput : null}\n        {showPasswordInput ? passwordInput : null}\n        <div className=\"dialog-buttons\">\n          {this.state.haveCode || this.state.sent ? null :\n            <a href=\"#\" onClick={this.handleShowCodeField} style={{marginRight: 'auto'}}>\n              <FormattedMessage id=\"password_i_have_code\" defaultMessage=\"I have code\"\n                description=\"Call to open field to enter password reset code\" />\n            </a>\n          }\n          <button className=\"primary\" type=\"submit\">{\n            showPasswordInput ?\n              <FormattedMessage id=\"button_reset\" defaultMessage=\"Reset\" description=\"Button [Reset]\" />\n            :\n              <FormattedMessage id=\"button_send_request\" defaultMessage=\"Send request\"\n                description=\"Button [Send request]\" />\n          }</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default injectIntl(PasswordResetView);\n","// Editor for a phone number.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nconst messages = defineMessages({\n  mobile_number_required: {\n    id: 'mobile_number_required',\n    defaultMessage: 'Mobile phone number required',\n    description: 'Error message'\n  }\n});\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    const prefix = `+${this.state.dialCode}`;\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\n    formatted = formatted.substring(prefix.length).trim();\n    this.setState({localNumber: formatted});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\n    let number = null;\n    try {\n      number = parsePhoneNumber(`+${raw}`);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\n      return;\n    }\n\n    this.inputField.setCustomValidity('');\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["React","FormattedMessage","defineMessages","injectIntl","PhoneEdit","VisiblePassword","HashNavigation","messages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","PasswordResetView","PureComponent","constructor","props","state","tel","email","password","sent","haveCode","code","handleSubmit","bind","handleEmailChange","handlePasswordChange","handleCodeChange","handleShowCodeField","tinode","connect","catch","err","onError","message","componentDidMount","parsed","parseUrlHash","window","location","hash","setState","token","params","scheme","e","preventDefault","onReset","trim","reqCredMethod","cred","secret","btoa","onRequest","then","_","msg","intl","formatMessage","target","value","replace","render","showCredentialInput","showPasswordInput","passwordInput","placeholder","emailInput","phoneInput","onShowCountrySelector","number","codeInput","numbers_only","credentialInput","marginRight","AsYouType","getExampleNumber","parsePhoneNumber","examples","dcodes","flagEmoji","mobile_number_required","codeMap","default","forEach","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","input","filterNumber","substring","length","raw","isValid","inputField","setCustomValidity","onSubmit","format","key","sample","formatInternational","ref","autoFocus"],"sourceRoot":""}